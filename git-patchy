#!/home/remi/development/Patchouli/venv/bin/python3

import os
import sys
import traceback
from argparse import ArgumentParser, ArgumentTypeError, ArgumentError
from pathlib import Path

import logging
import logging.config

from pathlib import Path

configpath = Path(__file__).parent / "src" / "logging.conf"
logging.config.fileConfig(configpath)

path_root = Path(__file__).parent
sys.path.append(str(path_root))

from src.mytypes import *
from src.patchouli import Patchouli
from src.config import Config, get_config
from src.exceptions import InvalidEnvironmentException
import src.utils as utils


class Runner:
    config: Config

    def __init__(self):
        self.parser = ArgumentParser(
            description="Patchouli Plugin Manager",
            usage="""git patchy [help|show]
    Note:You can add "--help" after most subcommands to get more detailed help.

    help
        Prints help

    list-envs
        List all valid environments in the configured base path.

    show
        Prints plugin information and various metadata about them.
        Currently prints plugin name, jar path, folder path if exists, and config file list if exists
""",
        )
        self.parser.add_argument(
            "command", help="Subcommand to run: 'git patchy [help|show]'"
        )

        if len(sys.argv) == 1:
            self.parser.print_help(sys.stderr)
            sys.exit(1)

        self.args = self.parser.parse_args(sys.argv[1:2])

        self.config = get_config()

        subcommand = self.args.command.replace("-", "_")
        if not hasattr(self, subcommand):
            print("Unrecognized subcommand")
            self.parser.print_help()
            sys.exit(1)

        getattr(self, subcommand)()

    def list_envs(self):
        print("Valid envs:")
        for env in Environment:
            print(f"- {env.value}")

    def help(self):
        self.parser.print_help()

    @staticmethod
    def __validate_env(env_str: str):
        try:
            env = Environment(env_str)
            utils.ensure_valid_env(env)
        except ValueError as e:
            raise ArgumentTypeError(
                f"The provided env '{env_str}' was not valid. Must be one of {[env.name for env in Environment]} (Case insensitive)"
            )
        except InvalidEnvironmentException as e:
            raise ArgumentError from e  # type: ignore
        except Exception as e:
            traceback.print_exc()
            raise e
        return env

    def show(self):
        parser = ArgumentParser(
            description="Shows plugin information",
            usage="""git patchy show [--env=prod] """,
        )
        parser = utils.add_default_argparse_args(parser)
        parser.add_argument(
            "--env",
            default=None,
            type=self.__validate_env,
            help="Changes what environment we target. This is also used as the 'src_env' environment for commands that need a src/dest.",
        )

        args = parser.parse_args(sys.argv[2:])

        patchy = Patchouli(
            config=self.config,
            target_env=args.env,
            plugins_whitelist=args.plugins_whitelist,
            plugins_blacklist=args.plugins_blacklist,
        )
        patchy.print_plugin_data()

    def copy_to(self):
        parser = ArgumentParser(
            description="Copies configs from one env to another. Must be run as root.",
            usage='''sudo git patchy copy-to --src_env="prod" --dest_env="dev1"''',
        )
        parser = utils.add_default_argparse_args(parser)
        parser.add_argument(
            "--src_env",
            default=None,
            type=self.__validate_env,
            help="Environment to copy files from.",
        )
        parser.add_argument(
            "--dest_env",
            default=None,
            type=self.__validate_env,
            help="Environment to copy files to.",
        )

        args = parser.parse_args(sys.argv[2:])

        patchy = Patchouli(
            config=self.config,
            target_env=args.src_env,
            plugins_whitelist=args.plugins_whitelist,
            plugins_blacklist=args.plugins_blacklist,
        )
        patchy.copy_plugin_data(args.dest_env)


if __name__ == "__main__":
    runner = Runner()
